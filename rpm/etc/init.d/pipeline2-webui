#!/bin/bash
#
#
# chkconfig: 345 99 99
#
# description: pipeline2-webui init
# processname: pipeline2-webui

# Source function library.
. /etc/rc.d/init.d/functions

LOG=/var/log/daisy-pipeline2-webui/pipeline2.log
PROG_DIR=/opt/daisy-pipeline2-webui/bin
PROG_NAME=pipeline2-webui
PROC_NAME=daisy-pipeline2-webui
PROG="$PROG_DIR/$PROG_NAME"
PROC="$PROG_DIR/$PROC_NAME"

SERVICE_NAME=pipeline2-webui
RUN_AS_USER=pipeline2
PID_FILE=/var/run/daisy-pipeline2-webui/play.pid
OPTIONS="&>${LOG}"

umask 0002

daemon_pid() {
    echo `ps aux | grep daisy-pipeline2-webui/ | grep -v grep | awk '{print $2}'`
}

start() {
    status_result=$(status -p $PID_FILE $SERVICE_NAME)
    [ $? -eq 0 ] && success && echo $status_result && return 0
    daemon --user=$RUN_AS_USER --pidfile=$PID_FILE "$PROG $OPTIONS &"

	running_pid=$(daemon_pid)
    # Check if we are still running, if pid exist, assume all is well
    [ $? -eq 0 ] && echo $running_pid > "$PID_FILE" && echo "$SERVICE_NAME started (pid $running_pid)" && return 0

    # If we reach this line, things didn't went well
    failure
    echo "Errors starting $SERVICE_NAME"
    return 3
}

stop() {
      PID=$(daemon_pid)
      if [[ $PID ]] ; then
        echo -n "Stopping $SERVICE_NAME"
        kill -15 $(daemon_pid)
        sleep 1
        if [[ $(daemon_pid) ]] ; then
          kill -9 $(daemon_pid)
          success
        else
          success
        fi
        RETVAL=$?
      else
        success
        echo "$PROG already stopped"
        RETVAL=0
      fi
      echo
      return $RETVAL
}

# See how we were called.
RETVAL=0

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        stop
        start
        ;;
  status)
        status -p $PID_FILE $SERVICE_NAME
        ;;
  *)
        echo $"Usage: $prog {start|stop|restart|status}"
        exit 1
esac

exit $?
